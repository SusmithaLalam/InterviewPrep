{
	"data":[
		{
			"id":1,
			"quest":"What  is a data structure?",
			"visemes":[[7, 1, 19, 6, 15, 1, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 0, 0], [0]],
			"text":"A data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data. In short, we may say that data structures are the main memory constructs."
		},
		{
			"id":2,
			"quest":"What is the main purpose of data structures? Give some examples where data structures are useful.",
			"visemes":[[7, 1, 19, 6, 15, 17, 1, 21, 4, 19, 21, 5, 21, 1, 15, 1, 18, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 0], [20, 6, 18, 15, 1, 21, 6, 20, 15, 1, 21, 21, 1, 14, 15, 7, 4, 13, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 2, 13, 6, 7, 15, 18, 1, 14, 0], [0]],
			"text":"Data structures provide a means of an efficient access and management of large amounts of data, for example, in databases, internet indexing services, data access and manipulations within a program, and so on. Different types of data structures are suited to different kinds of tasks."
		},
		{
			"id":3,
			"quest":"What are file structures? What is its purpose?",
			"visemes":[[7, 1, 19, 2, 13, 18, 11, 14, 15, 19, 13, 1, 20, 16, 5, 15, 0], [7, 1, 19, 6, 15, 6, 19, 15, 21, 5, 21, 1, 15, 0], [0]],
			"text":"File structures are secondary storage (such as disk or peripheral memory) based 'constructs' used for the purpose of minimizing the storage space and access time. A file structure allows applications to read, write and modify data efficiently."
		},
		{
			"id":4,
			"quest":"Can you name some of the types of file structures?",
			"visemes":[[20, 1, 19, 6, 7, 19, 4, 21, 15, 1, 21, 1, 18, 17, 1, 19, 11, 21, 15, 1, 18, 18, 11, 14, 15, 19, 13, 1, 20, 16, 5, 15, 0], [0]],
			"text":"File structures for sequential access can be sequential files, and for random access, indexed files and hashed files.  B-trees are often used as file structures. An index table is used in FAT32 which is an older file system but still commonly used in USB flash drives. "
		},
		{
			"id":5,
			"quest":"What is an indexed file?",
			"visemes":[[7, 1, 19, 6, 15, 1, 19, 6, 19, 19, 4, 20, 15, 19, 18, 11, 14, 0], [0]],
			"text":"An indexed file is a file structure with an index that allows easy random access to any record given its file key. The key must be such that it uniquely identifies an address of a record. The indices are created along with the file and maintained by the system. "
		},
		{
			"id":6,
			"quest":"What is a hashed file? Name some hashing methods and briefly describe how they work.",
			"visemes":[[7, 1, 19, 6, 15, 1, 12, 1, 16, 19, 18, 11, 14, 0], [19, 4, 21, 15, 1, 21, 12, 1, 16, 6, 20, 21, 4, 17, 1, 19, 15, 1, 19, 19, 21, 13, 6, 18, 14, 6, 19, 6, 15, 20, 13, 11, 21, 12, 9, 17, 4, 7, 5, 20, 0], [0]],
			"text":"A hashed file uses a mathematical function called hash function to map the key to indices or address which is used by the operating system to access the record. There are several methods of hashing. For example, in the direct hashing, the key is the data file address without any algorithmic manipulations. In the Modulo division hashing the address is the remainder of key divided by the file size plus 1. In digit extraction hashing, selected digits are extracted from the key and used as the address."
		},
		{
			"id":7,
			"quest":"What is a vector in data structures?",
			"visemes":[[7, 1, 19, 6, 15, 1, 18, 4, 20, 19, 5, 6, 19, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 0], [0]],
			"text":"A Vector is a resizable array.  A vector can be expanded or shrunk using grow or shrink functions."
		},
		{
			"id":8,
			"quest":"This is a 3-part question: How is a vector implemented in the computer memory? How does the size of a vector grow? When will you not use a vector?",
			"visemes":[[17, 6, 15, 6, 15, 1, 21, 2, 13, 19, 20, 7, 4, 15, 16, 1, 19, 12, 9, 6, 15, 1, 18, 4, 20, 19, 5, 6, 21, 21, 14, 1, 21, 4, 19, 19, 1, 19, 6, 19, 17, 1, 20, 1, 21, 21, 6, 7, 19, 5, 21, 4, 21, 5, 6, 0], [12, 9, 19, 1, 15, 17, 1, 15, 11, 15, 1, 18, 1, 18, 4, 20, 19, 5, 20, 13, 8, 0], [7, 4, 19, 7, 6, 14, 6, 7, 19, 2, 19, 6, 7, 15, 1, 18, 4, 20, 19, 5, 0], [0]],
			"text":"A vector is implemented as a contiguous memory block. A vector can be grown either explicitly or automatically by adding data. In practice, it grows by doubling its allocated space instead of incrementing it. However, a vector is not suitable in some cases, for example, if we need to delete an entry in a vector, it would be an expensive operation. In that case, a linked list is better suited."
		},
		{
			"id":9,
			"quest":"What are linked lists in data structures? Why are lists better than vectors?",
			"visemes":[[7, 1, 19, 2, 13, 14, 6, 20, 20, 19, 14, 6, 15, 19, 15, 6, 19, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 0], [7, 11, 2, 13, 14, 6, 15, 19, 15, 21, 4, 19, 5, 17, 1, 19, 18, 4, 20, 19, 5, 15, 0], [0]],
			"text":"A list is a data structure 'construct' using pointers as links. A linked list is more efficient for deletions/addition of entries than a vector because it need not be stored as a contiguous block in the memory."
		},
		{
			"id":10,
			"quest":"So, why do we not just use linked lists, why use arrays at all? Are there any disadvantages of linked lists as compared to arrays?",
			"visemes":[[15, 8, 0, 7, 11, 19, 7, 7, 6, 19, 2, 19, 16, 1, 15, 19, 6, 7, 15, 14, 6, 20, 20, 19, 14, 6, 15, 19, 15, 0, 7, 11, 6, 7, 15, 5, 4, 15, 1, 19, 3, 14, 0], [2, 13, 17, 4, 13, 4, 19, 6, 19, 6, 15, 1, 19, 18, 1, 19, 19, 6, 16, 6, 15, 1, 18, 14, 6, 20, 20, 19, 14, 6, 15, 19, 15, 1, 15, 20, 1, 21, 21, 4, 13, 19, 19, 7, 5, 4, 15, 0], [0]],
			"text":"Although linked lists have the advantage of easy insertion/deletion and dynamic sizing, they have a few disadvantages, for example, For each element, we need to store the corresponding pointers and we can access the elements only sequentially not randomly."
		},
		{
			"id":11,
			"quest":"What are singly-linked lists, and doubly-linked lists?",
			"visemes":[[7, 1, 19, 2, 13, 15, 6, 20, 20, 14, 6, 14, 6, 20, 20, 19, 14, 6, 15, 19, 15, 0, 1, 19, 19, 19, 1, 21, 14, 6, 14, 6, 20, 20, 19, 14, 6, 15, 19, 15, 0], [0]],
			"text":"In a singly-linked list, for each node, the pointer links help traverse in only one direction in the list.  A doubly linked list stores pointer links for both the next-node and the previous-node which allows traversal in both directions of the list."
		},
		{
			"id":12,
			"quest":"Is there any other type of linked list that you are aware of? And where can it be used?",
			"visemes":[[6, 15, 17, 4, 13, 4, 19, 6, 1, 17, 5, 19, 11, 21, 1, 18, 14, 6, 20, 20, 19, 14, 6, 15, 19, 17, 1, 19, 6, 7, 2, 13, 1, 7, 4, 13, 1, 18, 0], [1, 19, 19, 7, 4, 13, 20, 1, 19, 6, 19, 21, 6, 6, 7, 15, 19, 0], [0]],
			"text":"There are other types of linked-lists, for example, a circular singly-linked list or circular doubly-linked list where all nodes are connected to form a loop or a circle, so any node can be a starting point for traversal. These can be useful in representing an array that is circular in structure, for example, the corners of a polygon or a set of processes that are to be time-shared in a round-robin order.  "
		},
		{
			"id":13,
			"quest":"What is a map or a dictionary in data structures?",
			"visemes":[[7, 1, 19, 6, 15, 1, 21, 1, 21, 3, 13, 1, 19, 6, 20, 16, 1, 19, 4, 13, 6, 6, 19, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 0], [0]],
			"text":"A map (also called a dictionary or an associative array) is key-value pair based abstract data type. (The implementation may have different names in different languages, e.g. in Python, it is called dictionaries and in Java, it is called HashMaps and Hashtables, etc.)"
		},
		{
			"id":14,
			"quest":"What are the advantages of using the map as a data construct? Can you explain with an example?",
			"visemes":[[7, 1, 19, 2, 13, 17, 1, 1, 19, 18, 1, 19, 19, 6, 16, 6, 15, 1, 18, 6, 7, 15, 6, 20, 17, 1, 21, 1, 21, 1, 15, 1, 19, 4, 19, 1, 20, 1, 19, 15, 19, 13, 1, 20, 19, 0], [20, 1, 19, 6, 7, 6, 20, 15, 21, 14, 4, 19, 7, 6, 17, 1, 19, 6, 20, 15, 1, 21, 21, 1, 14, 0], [0]],
			"text":"A map is efficient for key-based lookup operations. For example, if we store the information such as scores or grades about the students of a school with their names as the key, it is very efficient and straight-forward to retrieve the information on any student by searching through the keys, names in this case."
		},
		{
			"id":15,
			"quest":"What are the different implementation of the map?",
			"visemes":[[7, 1, 19, 2, 13, 17, 1, 19, 6, 18, 5, 1, 19, 19, 6, 21, 21, 14, 1, 21, 4, 19, 19, 4, 16, 1, 19, 1, 18, 17, 1, 21, 1, 21, 0], [0]],
			"text":"A map is implemented either using hash map or binary search trees. "
		},
		{
			"id":16,
			"quest":"How does a hash table or hash map work?",
			"visemes":[[12, 9, 19, 1, 15, 1, 12, 1, 16, 19, 4, 21, 1, 14, 3, 13, 12, 1, 16, 21, 1, 21, 7, 5, 20, 0], [0]],
			"text":"In a hash map (also called hash table) the keys are converted into unique numeric indexes using some mathematical hash function and stored in an array. Using which one can quickly access the desired values."
		},
		{
			"id":17,
			"quest":"What is the advantage of a hash table and where is it used? Can you give some examples?",
			"visemes":[[7, 1, 19, 6, 15, 17, 1, 1, 19, 18, 1, 19, 19, 6, 16, 1, 18, 1, 12, 1, 16, 19, 4, 21, 1, 14, 1, 19, 19, 7, 4, 13, 6, 15, 6, 19, 6, 7, 15, 19, 0], [20, 1, 19, 6, 7, 20, 6, 18, 15, 1, 21, 6, 20, 15, 1, 21, 21, 1, 14, 15, 0], [0]],
			"text":"Hash maps are used in many practical applications because of its efficiency in three main things: searching data, inserting data, and deleting data. Hash maps are commonly used in building other complex systems or data structures, for example, database indexing, sets, caches (LRU cache), etc."
		},
		{
			"id":18,
			"quest":"What is the lookup time in a map? What is the lookup time when a map is implemented as a hash map?",
			"visemes":[[7, 1, 19, 6, 15, 17, 1, 14, 4, 20, 1, 21, 19, 11, 21, 6, 19, 1, 21, 1, 21, 0], [7, 1, 19, 6, 15, 17, 1, 14, 4, 20, 1, 21, 19, 11, 21, 7, 4, 19, 1, 21, 1, 21, 6, 15, 6, 21, 21, 14, 1, 21, 4, 19, 19, 1, 19, 1, 15, 1, 12, 1, 16, 21, 1, 21, 0], [0]],
			"text":"In a hash map, a lookup can be done in constant time. Whereas, a lookup in a map, if implemented using a B-tree, can be done in log(N)"
		},
		{
			"id":19,
			"quest":"What is the difference between a binary tree and a binary search tree?",
			"visemes":[[7, 1, 19, 6, 15, 17, 1, 19, 6, 18, 5, 1, 19, 15, 21, 6, 19, 7, 6, 19, 1, 21, 11, 19, 5, 6, 19, 13, 6, 1, 19, 19, 1, 21, 11, 19, 5, 6, 15, 5, 16, 19, 13, 6, 0], [0]],
			"text":"A Binary tree is a tree data structures where a node may have at most two child nodes. In a Binary Search Tree (or BST), the nodes (keys) are kept in sorted order such that smaller value is on the left and larger value is on the right of a node. Therefore, a search operation is fast. "
		},
		{
			"id":20,
			"quest":"What is a self-balancing binary search tree?",
			"visemes":[[7, 1, 19, 6, 15, 1, 15, 4, 14, 18, 21, 1, 14, 1, 19, 15, 6, 20, 21, 11, 19, 5, 6, 15, 5, 16, 19, 13, 6, 0], [0]],
			"text":"A self-balancing binary search tree is one that automatically keeps the height of the tree small, which makes searching even faster because the searching time is proportional to the height of the tree."
		},
		{
			"id":21,
			"quest":"What is a Trie data structure?",
			"visemes":[[7, 1, 19, 6, 15, 1, 19, 13, 11, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 0], [0]],
			"text":"A Trie is an ordered tree data structure used to store a dynamic set or associative array where the keys are usually characters / strings. The node position in the trie defines the key with which it is associated. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. "
		},
		{
			"id":22,
			"quest":"Where are tries used?",
			"visemes":[[7, 4, 13, 2, 13, 19, 13, 11, 15, 6, 7, 15, 19, 0], [0]],
			"text":"Tries can be used as a replacement for other data structures such as binary search trees, hash tables etc.. Tries can be used for storing dictionaries or predictive texts. Tries are also used burst-sort and Radix sort algorithms."
		},
		{
			"id":23,
			"quest":"Describe a graph data structure?",
			"visemes":[[19, 6, 15, 20, 13, 11, 21, 1, 20, 13, 1, 18, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 0], [0]],
			"text":"A graph is a non-linear abstract data type that comprises a finite set of nodes and edges connecting pairs of nodes. Each node has a key or value. For directed graphs where the nodes are ordered pairs, arrows are used."
		},
		{
			"id":24,
			"quest":"Can you give a practical example of where a directed graph can be used?",
			"visemes":[[20, 1, 19, 6, 7, 20, 6, 18, 1, 21, 13, 1, 20, 19, 1, 20, 1, 14, 6, 20, 15, 1, 21, 21, 1, 14, 1, 18, 7, 4, 13, 1, 19, 5, 4, 20, 19, 1, 19, 20, 13, 1, 18, 20, 1, 19, 21, 6, 6, 7, 15, 19, 0], [0]],
			"text":"A directed graph can be used to represent the various locations of a downtown (or city central area) and the one-way streets connecting them."
		},
		{
			"id":25,
			"quest":"What is a heap data structure, can you explain? Also, can you name a few types of Heaps?",
			"visemes":[[7, 1, 19, 6, 15, 1, 12, 6, 21, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 0, 20, 1, 19, 6, 7, 6, 20, 15, 21, 14, 4, 19, 0], [3, 14, 15, 8, 0, 20, 1, 19, 6, 7, 19, 4, 21, 1, 18, 6, 7, 19, 11, 21, 15, 1, 18, 12, 6, 21, 15, 0], [0]],
			"text":"A heap is a specialized tree-based data structure which is almost complete and the key of a parent node and the key of the child node follow a 'heap property' relationship. That is, for a max heap, the parent node key is greater than or equal to the keys of the child-nodes, and for a min heap, the parent node key is less than or equal to that of the child node. There are various types of heaps, for example, a Binomial heap, Fibonacci heap, k-ary heap, Leftist heap, Radix heap, etc."
		},
		{
			"id":26,
			"quest":"How do you maintain that heap data structure or heap property, can you explain? ",
			"visemes":[[12, 9, 19, 7, 6, 7, 21, 4, 19, 19, 4, 19, 17, 1, 19, 12, 6, 21, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 3, 13, 12, 6, 21, 21, 13, 2, 21, 5, 19, 6, 0, 20, 1, 19, 6, 7, 6, 20, 15, 21, 14, 4, 19, 0], [0]],
			"text":"Heap property is maintained using heap sort. Basically, heapsort divides the input into a sorted and an unsorted region, and iteratively shrinks the unsorted region by extracting the largest element and moving that to the sorted region. Floyd's algorithm is commonly used for heap sorting."
		},
		{
			"id":27,
			"quest":"What is L I F O and what is F I F O?",
			"visemes":[[7, 1, 19, 6, 15, 4, 14, 11, 4, 18, 8, 1, 19, 19, 7, 1, 19, 6, 15, 4, 18, 11, 4, 18, 8, 0], [0]],
			"text":"L I F O stands for Last in, First out. That is, the last element that was pushed on a stack for example, would be the first one to pop out of the stack. Conversely, F I F O stands for first in, first out, that is the first or oldest entry is processed first. For example in a F I F O queue or Operating system scheduling algorithm. "
		},
		{
			"id":28,
			"quest":"You mentioned 'Stack'. What is a stack and what operations can you perform on it? What is a stack overflow and what is fullstack?",
			"visemes":[[6, 7, 21, 4, 19, 16, 1, 19, 19, 15, 19, 1, 20, 0], [7, 1, 19, 6, 15, 1, 15, 19, 1, 20, 1, 19, 19, 7, 1, 19, 2, 21, 5, 4, 16, 1, 19, 15, 20, 1, 19, 6, 7, 21, 5, 18, 3, 13, 21, 2, 19, 6, 19, 0], [7, 1, 19, 6, 15, 1, 15, 19, 1, 20, 8, 18, 5, 18, 14, 8, 1, 19, 19, 7, 1, 19, 6, 15, 0], [0]],
			"text":"A stack is an abstract data type that is linear in structure and serves as a collection of homogeneous elements. Two operations can be performed on a stack--Push and Pop. Push adds an element to the top of the collection and pop removes the most recently added element. If we try to push an element to a fixed sized stack that is already full, it gives a stack-overflow error. Now, the term 'full stack' has a completely different usage--that is all levels of technical work in software development."
		},
		{
			"id":29,
			"quest":"What is an abstract data type?",
			"visemes":[[7, 1, 19, 6, 15, 1, 19, 1, 21, 15, 19, 13, 1, 20, 19, 19, 4, 19, 1, 19, 11, 21, 0], [0]],
			"text":"An abstract data type (ADT) is a mathematical model for data types, where a data type is defined by its behavior (that is, semantics) from the point of view of a user of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations"
		},
		{
			"id":30,
			"quest":"What is an AVL tree? What does AVL stand for?",
			"visemes":[[7, 1, 19, 6, 15, 1, 19, 19, 13, 6, 0], [7, 1, 19, 19, 1, 15, 15, 19, 1, 19, 19, 18, 3, 13, 0], [0]],
			"text":"AVL tree is a self-balancing binary search tree. AVL is named after its inventors Adelson-Velsky and Landis. An AVL tree has the property that the heights of the two child subtrees of any node differ by at most one. If at any time they differ by more than one, for example, after an insertion or deletion operation, a rebalancing is done to restore this property."
		},
		{
			"id":31,
			"quest":"What is a B-Tree? Is it just an abbreviation of Binary search tree? Where is a B-Tree used?",
			"visemes":[[7, 1, 19, 6, 15, 1, 21, 6, 19, 13, 6, 0], [6, 15, 6, 19, 16, 1, 15, 19, 1, 19, 1, 21, 13, 6, 18, 6, 4, 16, 1, 19, 1, 18, 21, 11, 19, 5, 6, 15, 5, 16, 19, 13, 6, 0], [7, 4, 13, 6, 15, 1, 21, 6, 19, 13, 6, 6, 7, 15, 19, 0], [0]],
			"text":"B-trees are not the same as binary search trees. A B-tree is a self-balancing tree data structure where a node can have more than two child nodes. We may say that it is a generalization of a binary search tree. B-trees are commonly used in databases and file systems."
		},
		{
			"id":32,
			"quest":"What are the advantages of using a B-Tree for databases?",
			"visemes":[[7, 1, 19, 2, 13, 17, 1, 1, 19, 18, 1, 19, 19, 6, 16, 6, 15, 1, 18, 6, 7, 15, 6, 20, 1, 21, 6, 19, 13, 6, 18, 3, 13, 19, 4, 19, 1, 21, 4, 15, 6, 15, 0], [0]],
			"text":"Using B-Trees for databases has several advantages: 1) It keeps keys in sorted order for sequential traversing 2) It uses a hierarchical index to minimize the number of disk/drive reads 3) it can efficiently handle any number of insertions and deletions  "
		},
		{
			"id":33,
			"quest":"How would you classify the various types of data structures (for example in C)?",
			"visemes":[[12, 9, 7, 4, 19, 6, 7, 20, 14, 1, 15, 1, 18, 11, 17, 1, 18, 4, 13, 6, 1, 15, 19, 11, 21, 15, 1, 18, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 18, 3, 13, 6, 20, 15, 1, 21, 21, 1, 14, 6, 19, 15, 6, 0], [0]],
			"text":"Data structures can be classified as primitive and non-primitive (or composite) type. In the primitive type, we have, Boolean, integers, floating point numbers, characters, pointers, etc. And in the non-primitive, we can have arrays, files, and lists. The lists can again be linear such as stacks and queues, and non-linear such as trees and graphs."
		},
		{
			"id":34,
			"quest":"I want to see a more detailed classification of the non-primitive data structures or a collection of data as used in some of the newer high-level languages. Please draw it on the board.",
			"visemes":[[11, 7, 2, 19, 19, 19, 7, 15, 6, 1, 21, 3, 13, 19, 6, 19, 4, 14, 19, 20, 14, 1, 15, 1, 18, 1, 20, 4, 16, 1, 19, 1, 18, 17, 1, 19, 2, 19, 21, 13, 6, 21, 1, 19, 6, 18, 19, 4, 19, 1, 15, 19, 13, 1, 20, 16, 5, 15, 3, 13, 1, 20, 1, 14, 4, 20, 16, 1, 19, 1, 18, 19, 4, 19, 1, 1, 15, 6, 7, 15, 19, 6, 19, 15, 1, 21, 1, 18, 17, 1, 19, 7, 5, 12, 11, 14, 4, 18, 1, 14, 14, 1, 20, 20, 7, 1, 16, 1, 15, 0], [21, 14, 6, 15, 19, 13, 3, 6, 19, 2, 19, 17, 1, 21, 3, 13, 19, 0], [0]],
			"text":"A collection can be linear or non-linear. Linear can be with generalized indexing such as dictionary and hash table; it can be direct access type such as an array, record, and file. Or, it can be sequential access type such as a list, stack, queue, and priority queue. \n Arrays can be unsorted or sorted type, and the list can have a linked representation or sequential representation. \n Now, the non-linear data structure can have a hierarchical structure like a tree or a heap, or it can have a group like a set or a graph."
		},
		{
			"id":35,
			"quest":"What is a Red-Black tree? Tell us about a situation where it has an advantage over a binary search tree?",
			"visemes":[[7, 1, 19, 6, 15, 1, 13, 4, 19, 21, 14, 1, 20, 19, 13, 6, 0], [19, 4, 14, 1, 15, 1, 21, 9, 19, 1, 15, 6, 16, 7, 4, 16, 1, 19, 7, 4, 13, 6, 19, 12, 1, 15, 1, 19, 1, 19, 18, 1, 19, 19, 6, 16, 8, 18, 5, 1, 21, 11, 19, 5, 6, 15, 5, 16, 19, 13, 6, 0], [0]],
			"text":"Red-Black Trees are an improvement on Binary Search Trees. In Binary Search Trees, the depth of the tree is not limited or controlled, so the operations can take a significant amount of time. Red-Black Trees solve this issue by marking all nodes in the tree as red or black, and setting rules of how certain positions between nodes should be processed. This method guarantees that the longest branch is not more than twice as long as the shortest branch, so each branch is shorter than 2log(N)."
		},
		{
			"id":36,
			"quest":"What is a priority queue?",
			"visemes":[[7, 1, 19, 6, 15, 1, 21, 13, 11, 3, 13, 1, 19, 6, 20, 6, 7, 0], [0]],
			"text":"A priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a 'priority' associated with it according to which the element is served."
		},
		{
			"id":37,
			"quest":"Can you merge two Trees? Merge sort tree?",
			"visemes":[[20, 1, 19, 6, 7, 21, 5, 16, 19, 7, 19, 13, 6, 15, 0], [21, 5, 16, 15, 3, 13, 19, 19, 13, 6, 0], [0]],
			"text":"How would you merge two linked lists?"
		},
		{
			"id":38,
			"quest":"How is a structure in C different from an object in C++?",
			"visemes":[[12, 9, 6, 15, 1, 15, 19, 13, 1, 20, 16, 5, 6, 19, 15, 6, 19, 6, 18, 5, 1, 19, 19, 18, 13, 1, 21, 1, 19, 2, 21, 16, 4, 20, 19, 6, 19, 0], [0]],
			"text":"A struct is just a structured piece of data. Whereas, an object is a self-contained entity that may have data and can perform some operations (methods) as well."
		},
		{
			"id":39,
			"quest":"What is a tuple and where is it used?",
			"visemes":[[7, 1, 19, 6, 15, 1, 1, 19, 19, 7, 4, 13, 6, 15, 6, 19, 6, 7, 15, 19, 0], [0]],
			"text":"A Tuple is a data structure consisting of multiple parts and is immutable, that is once assigned, it cannot be changed. Tuples are used whenever we want to return multiple results from a function. Tuples can also be used as keys for dictionaries."
		},
		{
			"id":40,
			"quest":"What is JSON? What can you tell us about it?",
			"visemes":[[7, 1, 19, 6, 15, 0], [7, 1, 19, 20, 1, 19, 6, 7, 19, 4, 14, 1, 15, 1, 21, 9, 19, 6, 19, 0], [0]],
			"text":"JavaScript Object Notation (or JSON) is a language independent  open-standard file format that uses human-readable text to transmit data objects consisting of attribute–value pairs and array data types (or any other serializable value). It is a very common data format used for asynchronous browser–server communication, including as a replacement for XML in some AJAX-style systems."
		}
	
	]
}